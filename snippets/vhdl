# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet entity "Entity" b
entity $1 is
  generic (
    $2
  );
  port (
    $3
  );
end entity;

architecture rtl of $1 is
  $4
begin
	$5
end architecture;
endsnippet

snippet component "Component" b
component $1
  generic($2);
  port($3);
end component;
endsnippet

snippet tb "Description" b
entity $1_tb is
end entity;

architecture behav of $1_tb is
  component $2
  end component;

    signal $3: bit_vector(2 downto 0);
begin
  gray2bin_0: $2 port map();

  process
    type pattern_type is record
      input: bit_vector(2 downto 0);
      output: bit_vector(2 downto 0);
    end record;

    type pattern_array is array (natural range<>) of pattern_type;
    constant patterns : pattern_array :=
    --   in     out
      (("000", "000"),
       ("001", "001"),
       ("111", "100"));
  begin
    report "BOT" severity note;
    for i in patterns'range loop
      gray <= patterns(i).input;
      wait for 4 ns;

      assert bin = patterns(i).output
        report "gray2bin_3 falhou." -- &
          -- " Linha: " & integer'image(i) & 
          -- " Entrada : " & bit'image(input) &
          -- " Esperado : " & bit'image(patterns(i).input) &
          -- " Obtido : " & bit'image(output) &
        severity failure;
      wait for 1 ns;
    end loop;
    report "ENT" severity note;
    wait;
  end process;
end architecture;
endsnippet
